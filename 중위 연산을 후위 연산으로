#스택 코드는 생략합니다.

#연산자 우선 순위 계산 함수
def precedence(op):
  if op == '*' or op == '/' : return 2
  elif op == '+' or op == '-' : return 1
  elif op == '(' or op == ')' : return 0
  else : return -1
  
  #중위표기 -> 후위표기로 바꾸는 함수
def Infix2postfix(expr):
    s = stack(100)#a라는 거에 원래 있던 stack이라는 이름의 스택을 찍어냄
    output = []#결과물을 찍어낼 리스트
    for term in expr: #표현식을 순서대로 순회, term을 expr만큼 순회
      if term == '(':
        s.push('(')#term 을 push해도 됨

      elif term in ')':
        while not s.isEmpty():#스택이 비어있지 않다면 왼쪽 괄호가 나올 때까지 pop, 괄호를 먼저 처리해야 하므로
          op = s.pop()
          if op == '(':
            break
          else:
            output.append(op)#output이라는 리스트의 제일 뒤에 op를 추가함, 스택이 아닌 리스트라서 append씀

      elif term in "*/+-":
        while not s.isEmpty():#스택이 안 비어있다면
          op = s.peek()#op에 담아서 비교
          if( precedence(term) <= precedence(op)):#현재 가장 스택 위에 있는 요소와 입력받는 걸 비교해서 스택 위에 있는게 크거나 같다면
            output.append(op)#op를 아웃풋에 append 해주고
            s.pop()#삭제해줘야지 완전히 처리된거임
          else: break#아니면 끝
        s.push(term)
      else:
        output.append(term)

    while not s.isEmpty():
      output.append(s.pop())
    return output

infix1=input()#중위
infix1=list(infix1)
postfix1=Infix2postfix(infix1)
print(postfix1)
#리스트 기반으로 입력받아서 리스트로 출력

"""
예시
압력 a+b*c
출력 ['a', 'b', 'c', '*', '+']
___
입력 a*b+c
출력 ab*c+
__
입력 (a+b)*c
출력 ab+c*

print(*postfix1)하면 a b * c + 이런 식으로 출력
"""
